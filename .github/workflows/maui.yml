name: .NET MAUI Build

on:
  push:
    branches:
      - '*'
  workflow_call:
    inputs:
      dotnet-version:
        required: true
        type: string
      dotnet-version-target:
        required: true
        type: string
      xcode-version:
        required: true
        type: string
      project-file:
        required: true
        type: string
      project-folder:
        required: true
        type: string
      build-config:  # Define the configuration as an input (e.g., "Debug" or "Release")
        required: true
        type: string
      build-version:
        required: true
        type: string
    secrets:
      p12-cert:
        required: true
      p12-cert-password:
        required: true
      appstore-issuer:
        required: true
      appstore-keyid:
        required: true
      appstore-private-key:
        required: true

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set XCode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ inputs.xcode-version }}

      - name: Setup .NET ${{ inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Install MAUI Workload
        run: dotnet workload install maui --ignore-failed-sources

      - name: Restore Dependencies
        run: dotnet restore ${{ inputs.project-file }}

      - name: Build iOS app
        run: dotnet build ${{ inputs.project-file }} -f:${{ inputs.dotnet-version-target }} -framework:.NETPlatform.iOS

      - name: Print Build Output (optional)
        run: |
          dotnet build ${{ inputs.project-file }} -f:${{ inputs.dotnet-version-target }}-ios -v detailed  # Capture detailed build output

     # - name: Archive iOS App (example, adjust based on your needs)
        # Assuming you have a script to archive the built app
        #run: |
        #  sh archive_ios_app.sh  # Replace with your script path
